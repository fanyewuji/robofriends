{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","container/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","props","id","name","email","className","alt","src","Cardlist","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onRequestRobots","onSearchChange","filteredrobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","console","log","catch","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2115c692.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    } \r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending:false })\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nconst Card =(props) => {\r\n    const {id, name, email} = props;\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw5 shadow-5 tc'>\r\n            <img alt='robots' src={`https://robohash.org/b${id}?size=200x200`} />\r\n            <div>\r\n                <h2 className='f5'>{ name }</h2>\r\n                <p className='f6 fw4'>{ email }</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist =(props) => {\r\n    const { robots } = props; \r\n    return (\r\n        <div>\r\n            { robots.map((user, i) => {\r\n            return (<Card key={robots[i].id} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} />)\r\n        }) }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist","import React from 'react';\r\n\r\nconst SearchBox = ({ searchchange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-light-blue'\r\n            type='search' placeholder='search robots' onChange={ searchchange }/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', height: '23rem'}}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch (error) {\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render () {\r\n        if (this.state.hasError) {\r\n            return <h2>Ooops.. Error occurred!</h2>\r\n        }\r\n        return this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    componentDidMount () {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render () {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n        const filteredrobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if (isPending) {\r\n            return <h1>loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                <h1 className='f1'>Robot Friends</h1>\r\n                <SearchBox searchchange={ onSearchChange }/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={ filteredrobots } />\r\n                    </ErrorBoundary>\r\n                </Scroll>   \r\n                </div>\r\n            );\r\n        } \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('robofriends/users.json')\r\n            .then(response => response.json())\r\n            .then(data => { \r\n                console.log(data)\r\n                dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data })\r\n            })\r\n            .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './container/App';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />   \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}